#include <iostream>
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
using namespace std;


class Conversion{
   
    public:
        virtual bool convertir(char c) = 0; //MÃ©todo virtual puro o abstracto 
  
};

class ConversionFloat: public Conversion{
    public:
        ConversionFloat();
        bool convertir(char c);
        float numFloat(char* dato);
        
};

ConversionFloat::ConversionFloat(){
}

//Definicion de metodos

bool ConversionFloat::convertir(char c){
    if (c == 46){ //\46 codigo ASCII del punto (.)
        return true;
    }else{
        return false;
    }
}

float ConversionFloat::numFloat(char* dato){
    return std::stof(dato);
}

class ConversionInt: public Conversion{
    public:
        ConversionInt();
        bool convertir(char c);
        int numInt(char* dato);
};

ConversionInt::ConversionInt(){
}

//Definicion de metodos

bool ConversionInt::convertir(char c){
    if (c == 46){
        return false;
    }else{
        return true;
    }
}

int ConversionInt::numInt(char* dato){
    return atoi(dato);
}


class IngresoDatos{
    private:
        ConversionInt converInt;
        ConversionFloat converFloat;
        char det;
    public:
        IngresoDatos();  

        //metodo pincipal
        char *ingresoDatos(char *str);

        //Sub metodos
        char *agregoChars(char *dato);
        bool unicoPunto(char c);
        char getDet();

        //Metodos de retorno
        int devolverInt(char *dato);
        float devolverFloat(char *dato);
};

//Constructor
IngresoDatos::IngresoDatos(){ 
}

//Definicion de metodos

char* IngresoDatos::ingresoDatos(char *str){
    
    //Creo con memoria dinamica un array de caracteres
    char *dato=new char[50];
    //Creo un caracter, con el que voy a recibir el input
    char c;

    //Imprimo el mensaje de entrada, ingresado por parametro
    printf("%s ", str);

	return agregoChars(dato);
}

char* IngresoDatos::agregoChars(char *dato){
	//Creo un caracter, con el que voy a recibir el input
    char c;
	int j = 0; //Iterador para la verifiacion del unico punto
	int i;
	for(i=0; c != 13; i++){
		
		c=getch();

		if(c >= '0' && c <= '9' || c == 46){

			if(this -> converFloat.convertir(c)){
				if(j == 1){
					throw std::invalid_argument("Un decimal no puede tener mas de un solo punto");
				}else{
					printf("%c", c);
					dato[i]=c;
					++j;
					this -> det = 'f'; //flotante
				}
			}		else if(this -> converInt.convertir(c)){

						printf("%c", c);
						dato[i]=c;

					}	else{
						printf("a chikitaaaaa");
						}

		} else if(c == 8){
			printf("%c", c);
			if(i != 0){
				dato[i]='\0';
				i--;
			}			
		}
	}

	dato[i]='\0';
	return dato;
}


char IngresoDatos::getDet(){
	return this -> det;
}

int  IngresoDatos::devolverInt(char *dato){
	return this -> converInt.numInt(dato);
}

float  IngresoDatos::devolverFloat(char *dato){
	return this -> converFloat.numFloat(dato);
}

int main(){
	
	IngresoDatos *a = new IngresoDatos();
	char *dato=new char[50];
	dato = a -> ingresoDatos("Ingrese sus numeritos: ");
	
	if((a -> getDet()) == '\0'){
		printf("\n Su numero es %i, y es un entero", a -> devolverInt(dato));
	}else if((a -> getDet()) == 'f'){
		printf("\n Su numero es %f, y es un flotante", a -> devolverFloat(dato));
	}else{
		printf("No estoy funcionando");
	}

    return 0;
}